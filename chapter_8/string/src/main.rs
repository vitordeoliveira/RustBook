fn main() {
    // Creating a New String
    let mut s = String::new();

    // to_string method, which is available on any type that implements the Display trait, as string literals do
    let data = "initial contents";
    let s = data.to_string();
    // the method also works on a literal directly:
    let s = "initial contents".to_string();

    // We can also use the function String::from to create a String from a string literal.
    let s = String::from("initial contents");

    // Remember that strings are UTF-8 encoded, so we can include any properly encoded data in them, as shown in Listing 8-14.
    let hello = String::from("السلام عليكم");
    let hello = String::from("Dobrý den");
    let hello = String::from("Hello");
    let hello = String::from("שָׁלוֹם");
    let hello = String::from("नमस्ते");
    let hello = String::from("こんにちは");
    let hello = String::from("안녕하세요");
    let hello = String::from("你好");
    let hello = String::from("Olá");
    let hello = String::from("Здравствуйте");
    let hello = String::from("Hola");

    // Updating a String
    // A String can grow in size and its contents can change, just like the contents of a Vec<T>, if you push more data into it.
    // In addition, you can conveniently use the + operator or the format! macro to concatenate String values.

    let mut s = String::from("foo");
    // The push_str method takes a string slice because we don’t necessarily want to take ownership of the parameter.
    s.push_str("bar");

    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1.push_str(s2);
    // If the push_str method took ownership of s2, we wouldn’t be able to print its value on the last line. However, this code works as we’d expect!
    println!("s2 is {s2}");

    let mut s = String::from("lo");
    // The push method takes a single character as a parameter and adds it to the String
    s.push('l');

    // Often, you’ll want to combine two existing strings. One way to do so is to use the + operator, as shown in Listing 8-18.
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    println!("s1 is {s1}");
    //  the compiler can coerce the &String argument into a &str. When we call the add method, Rust uses a deref coercion
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
                       // println!("s1 is {s1}");
    println!("s2 is {s2}");
    println!("s3 is {s3}");

    //     The string s3 will contain Hello, world!.
    //     The reason s1 is no longer valid after the addition, and the reason we used a reference to s2,
    //     has to do with the signature of the method that’s called when we use the + operator. The + operator uses the add method,
    //     whose signature looks something like this:

    // fn add(self, s: &str) -> String {
    // }

    // If we need to concatenate multiple strings, the behavior of the + operator gets unwieldy:

    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = s1 + "-" + &s2 + "-" + &s3;

    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    // For more complicated string combining, we can instead use the format! macro:
    // This code also sets s to tic-tac-toe. The format! macro works like println!,
    // but instead of printing the output to the screen, it returns a String with the contents.
    // The version of the code using format! is much easier to read, and the code generated by the
    // format! macro uses references so that this call doesn’t take ownership of any of its parameters.
    let s = format!("{s1}-{s2}-{s3}");
    println!("s1 is {s1}");

    // Indexing into Strings
    let s1 = String::from("hello");
    // let h = s1[0];
    // The error and the note tell the story: Rust strings don’t support indexing.
    // But why not? To answer that question, we need to discuss how Rust stores strings in memory.
    // A final reason Rust doesn’t allow us to index into a String to get a character is that indexing operations are expected to always take constant time (O(1)).
    // But it isn’t possible to guarantee that performance with a String, because Rust would have to
    // walk through the contents from the beginning to the index to determine how many valid characters there were.

    // Slicing Strings
    let hello = "Здравствуйте";
    let s = &hello[0..4];
    println!("s is {s}");
    // if we were to try to slice only part of a character’s bytes with something like &hello[0..1], 
    // Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:
    // You should use ranges to create string slices with caution, because doing so can crash your program.

    // way of solving 
    match hello.get(0..1) {
        Some(str_ref) => {
            println!("s is {}", str_ref);
        },
        None => println!("error"),
    }

    // Methods for Iterating Over Strings
    for c in hello.chars() {
        println!("{c}");
    }

    for b in hello.bytes() {
        println!("{b}");
    }
}
